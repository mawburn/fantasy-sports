[project]
name = "nfl-dfs-system"
version = "0.1.0"
description = "NFL DFS prediction and optimization system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Matt Burnett", email = "matt@example.com"},
]
keywords = ["nfl", "dfs", "machine-learning", "optimization", "sports-betting"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Core ML/Data Science
    "torch>=2.0.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.0.0",
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    # Web Framework
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    # NFL Data
    "nfl-data-py>=0.3.0",
    # Optimization
    "pulp>=2.7.0",
    "scipy>=1.11.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "schedule>=1.2.0",
    "joblib>=1.3.0",
    "click>=8.1.0",
    # Data Processing
    "pyarrow>=14.0.0",
    "duckdb>=0.9.0",
    # API utilities
    "httpx>=0.24.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    # Caching
    "diskcache>=5.6.0",
    # ML Experiment Tracking
    "mlflow>=2.5.0",
    # Visualization (optional, but useful for debugging)
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    # Date/Time handling
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    # Data validation
    "great-expectations>=0.17.0",
    # Fuzzy string matching for DK player matching
    "fuzzywuzzy[speedup]>=0.18.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "ruff>=0.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    # Type checking
    "mypy>=1.5.0",
    # Security scanning
    "bandit>=1.7.0",
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mdformat>=0.7.0",
    # Pre-commit hooks removed
]

[project.scripts]
nfl-dfs = "src.cli.main:cli"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["src"]

# Ruff configuration - Fast Rust-based Python linter and formatter
[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # flake8-eradicate
    "TRY",    # tryceratops
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
    "F841",   # unused variable
    "RUF001", # ambiguous unicode character in string
    "RUF002", # ambiguous unicode character in docstring
    "ERA001",  # commented-out code (we want to keep some for future use)
    "TRY300", # Consider moving statement to else block (stylistic preference)
    "TRY301", # Abstract raise to an inner function (stylistic preference)
    "TRY003", # Avoid specifying long messages outside the exception class (stylistic preference)
    "TRY401", # Redundant exception object in logging.exception (exception is auto-captured)
    "ARG002", # Unused method argument (sometimes needed for interface compliance)
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ARG", "FBT"]
"scripts/**/*.py" = ["INP001", "T201"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src"]
skip_gitignore = true

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "nfl_data_py.*",
    "pulp.*",
    "joblib.*",
    "mlflow.*",
    "schedule.*",
    "loguru.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--ignore=docs",
    "--ignore=build",
    "--ignore=.venv",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# coverage configuration
[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage_html_report"

# mdformat configuration
[tool.mdformat]
wrap = "no"
number = false
end_of_line = "lf"
compact_tables = true

[dependency-groups]
dev = [
    "ruff==0.3.0",
]
